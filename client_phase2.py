# -*- coding: utf-8 -*-
"""client_phase2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12tH6l_PbjzyvJmxpvUEvNbyJEpBM_e6y
"""

#!pip install ecpy
#!pip install pycryptodome

import math
import timeit
import random
import sympy
import warnings
from random import randint, seed
import sys
from ecpy.curves import Curve,Point
from Crypto.Hash import SHA3_256
import requests
from Crypto.Cipher import AES
from Crypto import Random
from Crypto.Util.Padding import pad
from Crypto.Util.Padding import unpad
import random
import re
import json
import hmac
import hashlib
import base64
API_URL = 'http://cryptlygos.pythonanywhere.com'

def generateKey(P,n):
  #s_l = Random.random.randint(1,n-2)
  s_l = randint(1,n-2)
  Q_l = P.mul(s_l)
  return Q_l,s_l
  
def generateSignature(P,s_l,n,m):
  k = randint(1,n-2)
  R = P.mul(k)
  r = R.x % n
  r = r.to_bytes((r.bit_length()+7)//8,byteorder='big')
  temp = SHA3_256.new(m+r)
  h = int.from_bytes(temp.digest(), byteorder='big') %n
  s = ((s_l * h) + k) % n
  return h,s

def findMAC(k_mac_ab, m):
  for i in range(1,len(m)):
    ctext = m[0:i]
    mac = m[i:len(m)]
    proposed_mac = hmac.new(k_mac_ab, msg=ctext, digestmod=hashlib.sha256).digest()
    if mac == proposed_mac:
      print(ctext)
      print(mac)

stuID =  '23435'  ## 24198,19872, 23574, 25655

#create a long term key
print('#####CREATE A LONG TERM KEY#####')
curve = Curve.get_curve('secp256k1')
n = curve.order
P = curve.generator

#Q_l,s_l = generateKey(P,n)
s_l = 66330753584552058499743612426655728498583790695777331302828810621340425279803
Q_l = Point(0xff15bf0935a8167c48e31ee0b81643eddc26cab170a5d25155b72fdcdd4e57c4,0x17c9839a3564de11a83fed280035b7891de6e7c2f95a9ef3345d7a09368d72f0, curve) 
print('s_l (private key) =',s_l)
print('Q_l (public key) =',Q_l)
print('\n')

#server's long term key
QSer_long = Point(0xc1bc6c9063b6985fe4b93be9b8f9d9149c353ae83c34a434ac91c85f61ddd1e9 , 0x931bd623cf52ee6009ed3f50f6b4f92c564431306d284be7e97af8e443e69a8c, curve)

# GENERATE SIGNATURE
print('GENERATE SIGNATURE')
m = stuID.encode()
print('m:',m)
h,s = generateSignature(P,s_l,n,m)
print('h:',h)
print('s:',s)
print('\n')
'''
#create ephemeral keys
print('#####CREATE EPHEMERAL KEYS#####')
ephemeral_keys = {}

for i in range(10):
  Q_A,s_A = generateKey(P,n)
  ephemeral_key = {'Q_A':Q_A, 's_A':s_A}
  ephemeral_keys[i] = ephemeral_key

for i in range(10):
  print('ephemeral key ', i, ':\n', 'Q_A (public key): ', ephemeral_keys[i]['Q_A'], '\ns_A (private key): ', ephemeral_keys[i]['s_A'], sep='')


####Register Long Term Key
mes = {'ID': stuID, 'H': h, 'S': s, 'LKEY.X': Q_l.x, 'LKEY.Y': Q_l.y}
response = requests.put('{}/{}'.format(API_URL, "RegLongRqst"), json = mes)
print(response.json())
code = input()

mes = {'ID':stuID, 'CODE': code}
response = requests.put('{}/{}'.format(API_URL, "RegLong"), json = mes)
print(response.json())

for i in range(len(ephemeral_keys)):
  #Sign ephemeral keys
  ephemeral_key = ephemeral_keys[i] 
  ekey = ephemeral_key['Q_A']
  m = str(ekey.x) + str(ekey.y)
  m = m.encode()
  h,s = generateSignature(P,s_l,n,m)

  #send ephemeral key
  mes = {'ID': stuID, 'KEYID': i , 'QAI.X': ekey.x, 'QAI.Y': ekey.y, 'Si': s, 'Hi': h}
  response = requests.put('{}/{}'.format(API_URL, "SendKey"), json = mes)
  print(response.json())
'''


print('GENERATE SIGNATURE TO GET MESSAGES')
m = stuID.encode()
h,s = generateSignature(P,s_l,n,m)

#Receiving Messages
mes = {'ID_A': stuID, 'S': s, 'H': h}
response = requests.get('{}/{}'.format(API_URL, "ReqMsg"), json = mes)
print(response.json())

#decrypt messages
i = response.json()['KEYID']
QBJ = Point(response.json()['QBJ.X'],response.json()['QBJ.Y'],curve)

k_enc_ab = QBJ*s_l
k_enc_ab_str = str(k_enc_ab.x) + str(k_enc_ab.y)
k_enc_ab_byte = k_enc_ab_str.encode()
temp = SHA3_256.new(k_enc_ab_byte)
k_mac_ab = temp.digest()

print("enc", k_enc_ab_byte)
print("mac", k_mac_ab)

print('')
incoming_msg = response.json()['MSG']
msg = incoming_msg.to_bytes((incoming_msg.bit_length()+7)//8,byteorder='big')
findMAC(k_mac_ab,msg)
print('')

#send decrypted messages to server
mes = {'ID_A': stuID, 'DECMSG': h}
response = requests.put('{}/{}'.format(API_URL, "Checker"), json = mes)
'''
print('GENERATE SIGNATURE TO RESET EPHEMERAL KEYS')
m = stuID.encode()
h,s = generateSignature(P,s_l,n,m)

###delete ephemeral keys
mes = {'ID': stuID, 'S': s, 'H': h}
response = requests.get('{}/{}'.format(API_URL, "RstEKey"), json = mes)

###########DELETE LONG TERM KEY
# If you lost your long term key, you can reset it yourself with below code.

# First you need to send a request to delete it. 
mes = {'ID': stuID}
response = requests.get('{}/{}'.format(API_URL, "RstLongRqst"), json = mes)

#Then server will send a verification code to your email. 
# Send this code to server using below code
mes = {'ID': stuID, 'CODE', code}
response = requests.get('{}/{}'.format(API_URL, "RstLong"), json = mes)

#Now your long term key is deleted. You can register again. 
'''

mac = hmac.new(k_mac_ab, msg=msg, digestmod=hashlib.sha256).digest()
print(mac)
print(msg)

t = 54227184919438432671268509757490332634260660236136114174163884151228219486258048543671027601757646595557489640886237682025706239190001512417181987627417649137663668214327085874153819901958669062990242
new_t = t.to_bytes((t.bit_length()+7)//8,byteorder='big')
print(new_t)
print(k_mac_ab)

"""#####CREATE EPHEMERAL KEYS#####
ephemeral key 0:
Q_A (public key): (0xe4823976f4abbc5ab9fbc06a1de5dd82b6b31c7bceddf691bcdaa7b03e7c8f45 , 0xac4cbba996935bf542dcf46b920c4446a9edd24ae867ea5f810f3484da7780cc)
s_A (private key): 64872027427802206552238135907668723624958438882139331273572011042356298851786
ephemeral key 1:
Q_A (public key): (0xb966042d87421100880de7bb36a29bfcbe481a289b36ede042c222c5acde40be , 0x6b0fb0714e26602416efe5d0e952d209715dc8ca52249b44c603108ab3acc540)
s_A (private key): 76290668267102984790121745729570162089382382357600512539380173567790014131599
ephemeral key 2:
Q_A (public key): (0x916943d928a93a79221f8e1a3538ffcab914660b220d4c437da815613a73beed , 0x74283c83e6e0cda0d9318c9fb9abd312a3c75a4a9c550880088cb3c4dd8329c3)
s_A (private key): 78182746627235706187568066332403641999836462216505753045747958937149485612196
ephemeral key 3:
Q_A (public key): (0x3e6b9bcb9a3badbd14830cfcb328af88166fcc044e77ca0521f50229604e07f1 , 0xd937dac5fed1838c8b269ed6e6f81569459339bb74b9bdfb79bd1253b71f46f5)
s_A (private key): 90844189930647363547272827787632104265030729467373740628287266037993602458493
ephemeral key 4:
Q_A (public key): (0x478932fe2a6409031dd8c0c316eb9ee4f2318cdf0d88a8b813cbca68c01d87dd , 0x3ca430d7f26a717d1db58dd5d92f3feeee50996ace7a988b938fdc93d824872f)
s_A (private key): 102964110698934417268176742251961174081707745606922372699586090532474716123201
ephemeral key 5:
Q_A (public key): (0xcfe0bf0b243e374795ea4594ff9ca1d8db96616e61e272e42a2ba714a518e6fe , 0x65bba992387b69328fed05443338ab720ad4e07b7970be863ec54e39dfa83117)
s_A (private key): 26612018116200942616272010339899193927887363960593317253884180594637355233712
ephemeral key 6:
Q_A (public key): (0x185643dc3dc5159c8b5b6275eb274e83e7509ee7dcbe8ae371ffb62d8f8129e0 , 0x91745a81005444a850fdbea79686b3775950938080075b0c0c33215f15c35c31)
s_A (private key): 113908328776886059162608691508520999625388961268911999168835710720917220296774
ephemeral key 7:
Q_A (public key): (0x6ff31073213d149421b1fe5d4eaa9ecf30bc39bc00003aea02a0d1370203118c , 0x7d4fcd77d4c104f3dad3290e44da7f195bfe840ee2fbf7b909fb6f3736978484)
s_A (private key): 112949106927837361855772224604231099184329369060443170077168440663090830430095
ephemeral key 8:
Q_A (public key): (0x6f65c4661eaf7278f3b755a29cc6e531cd31b61d8a92bcfa82900c7e75d402da , 0x5ad3ae00aec1401b9d108f342c0e4230ca8cb38c1c750ce4e949aa77527057f5)
s_A (private key): 80962486260618170149147819421856378488740118841619252240961118412502392201249
ephemeral key 9:
Q_A (public key): (0x28ccf5a23060439e94ba53f54eda277ff6e7ad61b5d5d1e75b4bab4dbd969eaa , 0x46c1dd20384c2b53f8b89046ddef088292530b26fd92bc1386ca1603b5948b4b)
s_A (private key): 78890277129678553750375428430945349157520296665971230399960161521530619451028
"""